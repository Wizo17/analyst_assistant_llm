from langchain.schema import SystemMessage, HumanMessage
from utils.logger import log_message
from templates.prompts import EXPLAINER_SYSTEM_PROMPT_FULL, EXPLAINER_SYSTEM_PROMPT_DIRECT, EXPLAINER_HUMAN_PROMPT


class DataAnalyst:
    """
    DataAnalyst is responsible for processing user queries and data samples
    to generate explanations using a language model session.
    """
    session = None

    def __init__(self, session):
        """
        Initialize the DataAnalyst with a session.

        Args:
            session: The session object used to interact with the language model.
        """
        self.session = session
        log_message("INFO", f"DataAnalyst initialized")

    def explain_results(self, user_query, data_sample, full=True):
        """
        Generate an explanation for the given user query and data sample.

        Args:
            user_query (str): The query provided by the user.
            data_sample (str): The data sample to be explained.
            full (bool): Whether to use the full system prompt or the direct system prompt.

        Returns:
            str: The explanation generated by the language model, or None if an error occurred.
        """
        # Construct messages
        if full:
            system_message = EXPLAINER_SYSTEM_PROMPT_FULL
        else:
            system_message = EXPLAINER_SYSTEM_PROMPT_DIRECT
        input_messages = [
            SystemMessage(content=system_message),
            HumanMessage(content=EXPLAINER_HUMAN_PROMPT.format(
                user_query=user_query, 
                data_sample=data_sample
                ))
        ]

        try:
            # Send to model via session
            response = self.session.process_query(input_messages)

            # Handle model response
            output = response.get("messages")
            if not output:
                raise Exception("No response from the model.")

            # Get result
            result = output[-1].content

            return result

        except Exception as e:
            log_message("ERROR", f"An error occurred during explanation: {str(e)}")
            return None